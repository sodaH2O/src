# opt-pilot

## Introduction

This is a general-purpose framework for simulation-based multi-objective
optimization methods that allows the automatic investigation of Pareto fronts.

The implementation is based on a Master/Slave paradigm,
employing several masters and groups of workers. To tackle the emerging
huge problems efficiently, we employ network topology-aware mappings of
masters and slaves.

The framework is easy to extend and use with other simulation-based forward
solvers, optimization algorithms and network mapping strategies. Currently the
code contains bindings for:

* OPAL forward simulations
* Evaluation of mathematical expressions as objectives (stand alone flavors)
* GA based optimizer (see [PISA](http://www.tik.ee.ethz.ch/pisa/)) using a
  NSGA-II selector
* [Homotopic Optimizer](#homotopic-optimizer)
* Island hopping strategies
* Random role assignment


## Building

In order to build opt-pilot install following dependencies:

* [CMake >= 2.8.2](http://www.cmake.org/)
* [OPAL](http://amas.web.psi.ch/)
* [Boost >= 1.49.0](http://www.boost.org/)
* [Google Tests](http://code.google.com/p/googletest/) for unit testing

Aside from the usual OPAL environment (see OPAL users guide) the cmake find
modules require an additional environment variable (`OPAL_LIB_PREFIX`)
pointing to the location of the OPAL library (`libOPAL.a`) and the CLASSIC
library (`libCLASSIC.a`). Both libs will be expected to be in
`$OPAL_LIB_PREFIX/lib`.

Make sure to build at least the boost libraries chrono, serialization and
system:

    ./bootstrap.sh --with-libraries=chrono,serialization,system
    ./b2 install --prefix=PREFIX

In order to be able to compile unit tests (optional) install `gtest` (or load the gtest module):

* get latest version from http://code.google.com/p/googletest/downloads/list
* unpack and cd to directory
* run `cmake`
* copy libs and inlcude to include dir and set `GTEST_PREFIX` accordingly:

    cp -r ../include/gtest /usr/local/include
    cp lib*.a /usr/local/lib

OPAL installed in $HOME/build/opal

Additional environment variables set are:

### Related to the build
    export GTEST_PREFIX=$HOME/extlib/gtest-1.6.0/

### Related to simulation runs
    export OPT_PILOT_EXE_PATH=$HOME/svnwork/opt-pilot/build/Drivers/pisa-opal/
    export RUN_OPAL_EXE_PATH=$HOME/svnwork/OPAL/opal-tools/runOPAL/
    export PATH=$RUN_OPAL_EXE_PATH:$PATH

### Homotopic Optimizer

`Note: the Homotopic Optimizer is disabled by default`

If the homotopic optimizer is to be used, the submodule containing the code
must also be initialized and cloned. This must be done from the opt-pilot root
directory with

    git submodule init
    git submodule update

or using git (untested)

    cd Optimizer
    git clone http://github.com/fosterac/Thesis.git


### Configuring

Create a build directory (set the environment variable `OPT_BUILD_DIR` to this path)

Example:

   cmake $HOME/git/opt-pilot 

In order to help reproducing bugs please **always** run `cmake` before
building a production version (saving git hash and build date to the `config.h`).


## Running

- set ENV variables (only required for OPAL):
  * `FIELDMAPS`: folder containing fieldmaps
  * `TEMPLATES`: directory containing the template input file
  * `SIMTMPDIR`: directory for temporary creation of simulation files (must exist)

- set program arguments:
  * `--inputfile=fname`: input file containing optimization problem
  * `--outfile=fname`: name used in output file generation
  * `--outdir=dirname`: name of directory used to store generation output
                        files (generated if non-existing)
  * `--initialPopulation=num`: size of the initial population
  * `--num-masters=num`: number of master nodes
  * `--num-coworkers=num`: number processors per worker
  * `--selector=path`: path of the selector (PISA only)
  * `--dump-dat=freq`: dump old generation data format with frequency (PISA only)
  * `--num-ind-gen=num`: number of individuals in a generation (PISA only)

- and for convergence we support:
  * `--maxGenerations=num`: number of generations to run
  * `--epslion=num`: tolerance of hypervolume criteria
  * `--expected-hypervol=num`: the reference hypervolume
  * `--conv-hvol-prog=num`: converge if change in hypervolume is smaller

- run, example:

        mpirun -np 4 ~/svnwork/ineichen-PhD/src/opt-pilot/build/opt-pilot.exe \
           --inputfile=FiPha3Opt1.tmpl --outfile=results.dat \
           --maxGenerations=5 --initialPopulation=10 --num-masters=1


### The Drivers

We provide 4 drivers (sources all located in `Drivers`):

* PISA stand-alone (`pisa-standalone.exe`): A simple driver providing a
stand-alone setting for running optimizations using PISA (see
`Tests/PisaStandAlone`).
* PISA OPAL (`pisa-opal.exe`): Pisa EA optimizer in combination with OPAL as
forward solver (see `Tests/Opal`) for an example.

* Homotopy (FIXME: not avaidable yet)


### Installing a Selector

We include PISA's nsga2 selector. Build the selector with

    make nsga2

in the build directory. To use the selector either use the `--selector`
option or copy the selector to the run directory:

    mkdir nsga2
    cp $OPT_BUILD_DIR/extlib/nsga2/nsga2 nsga2/
    cp $OPT_SRC_DIR/extlib/nsga2/nsga2_param.txt nsga2/


## Documentation

Documentation with examples can be found on the [wiki](https://gitlab.psi.ch/OPAL/opt-pilot/wikis/home).

All details to this project can be found in [Yves Ineichen's (the author) thesis](http://e-collection.library.ethz.ch/eserv/eth:7041/eth-7041-02.pdf).

After running

    make doc

in the `build` directory, the (Doxygen) source code documentation can be found
in the `build/Documentation/`.
