/***************************************************************************
 *
 * The IPPL Framework
 * 
 * This program was prepared by the Regents of the University of
 * California at Los Alamos National Laboratory (the University) under
 * Contract No.  W-7405-ENG-36 with the U.S. Department of Energy (DOE).
 * The University has certain rights in the program pursuant to the
 * contract and the program should not be copied or distributed outside
 * your organization.  All rights in the program are reserved by the DOE
 * and the University.  Neither the U.S.  Government nor the University
 * makes any warranty, express or implied, or assumes any liability or
 * responsibility for the use of this software
 *
 * Visit http://people.web.psi.ch/adelmann/ for more details
 *
 ***************************************************************************/

#include "Ippl.h"
#include <vector.h>
#define PRINT_DETAILS

//////////////////////////////////////////////////////////////////////

const unsigned Dim=2;
const int N=10;
const int vnodes=4;

int main(int argc, char *argv[])
{
  Inform out;
  Ippl ippl(argc, argv);
#ifdef PRINT_DETAILS
  out.setPrintNode();
#endif

  Index I(N), J(N);
  FieldLayout<Dim> layout1(I,J,PARALLEL,SERIAL,vnodes);
  Field<int,Dim> A1(layout1);
  Field<int,Dim> A2(layout1);

#ifdef IPPL_USE_MEMBER_TEMPLATES
  A1[I][J] = I + 10*J;
  A2[I][J] = J + 10*I;
#else
  assign(A1[I][J], I + 10*J);
  assign(A2[I][J], J + 10*I);
#endif

#ifdef PRINT_DETAILS
  out << "My portion of Field A1 = " << A1 << endl;
  out << "My portion of Field A2 = " << A2 << endl;
#endif

  vector< NDIndex<Dim> > newDomains;
  int nprocs = Ippl::getNodes();
  int myvnodes = vnodes/nprocs;
  int myproc = Ippl::myNode();
  for (int inode = 0; inode < myvnodes; inode++) {
    int gvnode = inode + myvnodes*myproc;
    int off1 = (gvnode&1) ? 5 : 0;
    int off2 = (gvnode&2) ? 5 : 0;
    newDomains.push_back( NDIndex<Dim>( Index(0+off1,4+off1),
                                        Index(0+off2,4+off2) ) );
  }

  layout1.Repartition(newDomains.begin(),newDomains.end());

#ifdef PRINT_DETAILS
  out << "My portion of Field A1 = " << A1 << endl;
  out << "My portion of Field A2 = " << A2 << endl;
#endif

  // an alternative way to generate the list of local vnode domains,
  // directly from a FieldLayout
  vector< NDIndex<Dim> > newDomains2;
  FieldLayout<Dim> layout2(I,J,SERIAL,PARALLEL,vnodes);
  FieldLayout<Dim>::iterator_iv lvnode, endvnode=layout2.end_iv();
  for (lvnode = layout2.begin_iv(); lvnode != endvnode; ++lvnode) 
    newDomains2.push_back(NDIndex<Dim>((*(*lvnode).second).getDomain()));

  layout1.Repartition(newDomains2.begin(),newDomains2.end());

#ifdef PRINT_DETAILS
  out << "My portion of Field A1 = " << A1 << endl;
  out << "My portion of Field A2 = " << A2 << endl;
#endif

  return 0;
}

/***************************************************************************
 * $RCSfile: repartition.cpp.org,v $   $Author: adelmann $
 * $Revision: 1.1.1.1 $   $Date: 2003/01/23 07:40:39 $
 * IPPL_VERSION_ID: $Id: repartition.cpp.org,v 1.1.1.1 2003/01/23 07:40:39 adelmann Exp $ 
 ***************************************************************************/





