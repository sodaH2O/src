TestParticleDebugParallel.cpp:  IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:  IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:  IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:  IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:  IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:  IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:  IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:    IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:  IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:    IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:  IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:    IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:  IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:    IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:  IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:    IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:  IpplInfo::Comm->barrier();
TestParticleDebugParallel.cpp:    IpplInfo::Comm->barrier();
bool.cpp:  sprintf(name,"out.%d",Ippl::Comm->myNode());
bool.cpp:  Ippl::Comm->barrier();
conejo_balance.cpp:  Ippl::Comm->barrier();
doof2d.cpp:  if( Ippl::Comm->myNode() == Parent ) {
doof2d.cpp:    Ippl::Comm->broadcast_all(mess, tag);
doof2d.cpp:  Message *mess = Ippl::Comm->receive_block(Parent, tag);
doof2d.cpp:  msg << "received a message on node " << Ippl::Comm->myNode();
doof2d_complex.cpp:  if( Ippl::Comm->myNode() == Parent ) {
doof2d_complex.cpp:    Ippl::Comm->broadcast_all(mess, tag);
doof2d_complex.cpp:  Message *mess = Ippl::Comm->receive_block(Parent, tag);
doof2d_complex.cpp:  msg << "received a message on node " << Ippl::Comm->myNode();
p1.cpp:  sprintf(name,"out.%d",Ippl::Comm->myNode());
p1.cpp:  Ippl::Comm->barrier();
p1.cpp:  Ippl::Comm->barrier();
p1.cpp:  Ippl::Comm->barrier();
p1.cpp:  Ippl::Comm->barrier();
p1.cpp:  Ippl::Comm->barrier();
p1.cpp:  Ippl::Comm->barrier();
p1.cpp:  Ippl::Comm->barrier();
p1.cpp:  Ippl::Comm->barrier();
p1.cpp:  Ippl::Comm->barrier();
p1.cpp:  Ippl::Comm->barrier();
p1.cpp:  Ippl::Comm->barrier();
p1.cpp:  Ippl::Comm->barrier();
p1.cpp:  Ippl::Comm->barrier();
p2.cpp:  sprintf(name,"out.%d",Ippl::Comm->myNode());
p2.cpp:  Ippl::Comm->barrier();
p2.cpp:  Ippl::Comm->barrier();
p2.cpp:  Ippl::Comm->barrier();
p2.cpp:  Ippl::Comm->barrier();
p2.cpp:  Ippl::Comm->barrier();
p2.cpp:  Ippl::Comm->barrier();
p3.cpp:  sprintf(name,"out.%d",Ippl::Comm->myNode());
p3.cpp:  Ippl::Comm->barrier();
randomparallel.cpp:  Ippl::Comm->barrier();
