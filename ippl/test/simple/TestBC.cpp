// -*- C++ -*-
/***************************************************************************
 *
 * The IPPL Framework
 * 
 * This program was prepared by PSI. 
 * All rights in the program are reserved by PSI.
 * Neither PSI nor the author(s)
 * makes any warranty, express or implied, or assumes any liability or
 * responsibility for the use of this software
 *
 * Visit http://www.acl.lanl.gov/POOMS for more details
 *
 ***************************************************************************/

// -*- C++ -*-
/***************************************************************************
 *
 * The IPPL Framework
 * 
 *
 * Visit http://people.web.psi.ch/adelmann/ for more details
 *
 ***************************************************************************/

// TestBC.cpp
// Various tests of BCond* classes.

// include files
#include "Utility/IpplInfo.h"
#include "Utility/Inform.h"
#include "Index/NDIndex.h"
#include "FieldLayout/CenteredFieldLayout.h"
#include "Field/Field.h"
#include "Field/BCond.h"
#include "Meshes/UniformCartesian.h"
#include "AppTypes/Vektor.h"
#include "Utility/FieldDebug.h"

#ifdef IPPL_USE_STANDARD_HEADERS
#include <fstream>
using namespace std;
#else
#include <fstream>
#endif

// forward declarations
#ifdef __MWERKS__
// Work around compiler limitation with really long hardCodedOutput() function.
void hardCodedOutput1(ofstream& of); // Prototype of function defined below.
void hardCodedOutput2(ofstream& of); // Prototype of function defined below.
void hardCodedOutput3(ofstream& of); // Prototype of function defined below.
void hardCodedOutput4(ofstream& of); // Prototype of function defined below.
#else
void hardCodedOutput(char* filename); // Prototype of function defined below.
#endif // __MWERKS__
bool thediff(char* filename1, char* filename2);


int main(int argc, char *argv[])
{
  Ippl ippl(argc, argv);
  Inform testmsg(argv[0]);
  bool passed = true; // Pass/fail test

  // For writing file output to compare against hardcoded correct file output:
  Inform fdi(NULL,"text.test.TestBC",Inform::OVERWRITE,0);
  setInform(fdi);

  const unsigned Dim = 2;
  Index I(5);
  Index J(5);
  NDIndex<Dim> domain;
  domain[0] = I;
  domain[1] = J;
  FieldLayout<Dim> layout(domain);
  typedef UniformCartesian<Dim> M;

  // Set Cell-centered boundary conditions.
  BConds<double,Dim,M,Cell> cbc;
  cbc[0] = new NegReflectFace<double,Dim,M,Cell>(0);
  cbc[1] = new ZeroFace<double,Dim,M,Cell>(1);
  cbc[2] = new ParallelPeriodicFace<double,Dim,M,Cell>(2);
  cbc[3] = new ParallelPeriodicFace<double,Dim,M,Cell>(3);            
  fdi << "++++++++BConds object cbc begin++++++++" << endl;
  fdi << cbc;
  fdi << "++++++++BConds object cbc end++++++++++" << endl;

  // Cell-centered test Field's:
  testmsg << "layout: " << layout << endl;
  Field<double,Dim,M,Cell> cA(layout,GuardCellSizes<Dim>(2),cbc);
  Field<double,Dim,M,Cell> cB(layout);

  // Set Vert-centered boundary conditions.
  BConds<double,Dim,M,Vert> vbc;
  vbc[0] = new NegReflectFace<double,Dim,M,Vert>(0);
  vbc[1] = new ZeroFace<double,Dim,M,Vert>(1);
  vbc[2] = new ParallelPeriodicFace<double,Dim,M,Vert>(2);
  vbc[3] = new ParallelPeriodicFace<double,Dim,M,Vert>(3);            
  // Vert-centered test Field's:
  Field<double,Dim,M,Vert> vA(layout,GuardCellSizes<Dim>(2),vbc);
  Field<double,Dim,M,Vert> vB(layout);

  // Assign reference values:
  int i,j;
  unsigned counter=0;
  double value;
  for (j=0; j<5; j++) {
     for (i=0; i<5; i++) {
       value = counter++;
       assign(cA[i][j], value);
       assign(vA[i][j], value);
     }
  }

  // Print reference values, then assign values ofsetting across boundaries
  // and print results, Cell-centered case:
  fdi << "++++++++++cA+++++++++++" << endl ;
  fp2(cA);
  cB[I][J] = cA[I-2][J-2];
  fdi << "++++++++++cB+++++++++++" << endl ;
  fp2(cB);

  // Print reference values, then assign values ofsetting across boundaries
  // and print results, Vert-centered case:
  fdi << "++++++++++vA+++++++++++" << endl ;
  fp2(vA);
  vB[I][J] = vA[I-2][J-2];
  fdi << "++++++++++vB+++++++++++" << endl ;
  fp2(vB);

  // Componentwise specification of BC's for a Field<Vektor>
  // Set Cell-centered boundary conditions.
  BConds<Vektor<double,Dim>,Dim,M,Cell> vcbc;
  vcbc[0] = new NegReflectFace<Vektor<double,Dim>,Dim,M,Cell>(0,0);
  vcbc[1] = new PosReflectFace<Vektor<double,Dim>,Dim,M,Cell>(0,1);
  vcbc[2] = new NegReflectFace<Vektor<double,Dim>,Dim,M,Cell>(1,0);
  vcbc[3] = new PosReflectFace<Vektor<double,Dim>,Dim,M,Cell>(1,1);
  vcbc[4] = new ZeroFace<Vektor<double,Dim>,Dim,M,Cell>(2);
  vcbc[5] = new ZeroFace<Vektor<double,Dim>,Dim,M,Cell>(3);            
  // Cell-centered test Field's:
  Field<Vektor<double,Dim>,Dim,M,Cell> vcA(layout,GuardCellSizes<Dim>(2),vcbc);
  Field<Vektor<double,Dim>,Dim,M,Cell> vcB(layout);
  // Assign reference values:
  counter=0;
  value=0.0;
  for (j=0; j<5; j++) {
     for (i=0; i<5; i++) {
       value = counter++;
       assign(vcA[i][j], (Vektor<double,Dim>)value);
     }
  }
  // Print reference values, then assign values ofsetting across boundaries
  // and print results, Cell-centered case:
  setFormat(2,2);
  fdi << "++++++++++vcA+++++++++++" << endl ;
  fp2(vcA);
  vcB[I][J] = vcA[I-2][J];
  fdi << "++++++++++vcB+++++++++++" << endl ;
  fp2(vcB);


  // Componentwise specification of BC's for a Field<Vektor>
  // Set CartesianCentering-centered boundary conditions.
  typedef CommonCartesianCenterings<Dim,2U>::vectorFace vFace;

  // For clarity, construct a mesh. Here, 5 is taken as the number of verts:
  M mesh(I,J);
  CenteredFieldLayout<Dim,M,vFace> layoutVFace(mesh);
  testmsg << "layoutVFace: " << layoutVFace << endl;

  BConds<Vektor<double,Dim>,Dim,M,vFace> vfbc;
  vfbc[0] = new NegReflectFace<Vektor<double,Dim>,Dim,M,vFace>(0,0);
  vfbc[1] = new PosReflectFace<Vektor<double,Dim>,Dim,M,vFace>(0,1);
  vfbc[2] = new NegReflectFace<Vektor<double,Dim>,Dim,M,vFace>(1,0);
  vfbc[3] = new PosReflectFace<Vektor<double,Dim>,Dim,M,vFace>(1,1);
  if (Ippl::getNodes() == 1) {
    vfbc[4] = new PeriodicFace<Vektor<double,Dim>,Dim,M,vFace>(2,0);
    vfbc[5] = new PeriodicFace<Vektor<double,Dim>,Dim,M,vFace>(2,1);
    vfbc[6] = new PeriodicFace<Vektor<double,Dim>,Dim,M,vFace>(3,0);
    vfbc[7] = new PeriodicFace<Vektor<double,Dim>,Dim,M,vFace>(3,1);
  }
  else {
    vfbc[4] = new ParallelPeriodicFace<Vektor<double,Dim>,Dim,M,vFace>(2,0);
    vfbc[5] = new ParallelPeriodicFace<Vektor<double,Dim>,Dim,M,vFace>(2,1);
    vfbc[6] = new ParallelPeriodicFace<Vektor<double,Dim>,Dim,M,vFace>(3,0);
    vfbc[7] = new ParallelPeriodicFace<Vektor<double,Dim>,Dim,M,vFace>(3,1);
  }
  // vFace-centered test Field's:
  Field<Vektor<double,Dim>,Dim,M,vFace> 
    vfA(layoutVFace,GuardCellSizes<Dim>(2),vfbc);
  Field<Vektor<double,Dim>,Dim,M,vFace> vfB(layoutVFace);
  // Assign red-flag values for to make inaccessible vector components visible:
  vfA = 9.99;
  vfB = 9.99;
  // Assign reference values:
  counter=0;
  value=0.0;
  Index Iverts(5);
  Index Jverts(5);
  Index Icells(4);
  Index Jcells(4);
  assign(vfA[Iverts][Jcells](0), Iverts + Jcells*5.0);
  assign(vfA[Icells][Jverts](1), Icells + Jverts*5.0);
  // Print reference values, then assign values ofsetting across boundaries
  // and print results, vFace-centered case:
  setFormat(2,2);

  // Set up for 3D Field's:
  const unsigned Dim3 = 3;
  Index K(5);
  FieldLayout<Dim3> layout3(I,J,K);
  typedef UniformCartesian<Dim3> M3;
  // Componentwise specification of BC's for a Cell-centered Field<SymTenzor>
  // Set boundary conditions, positive reflecting on diagonal, negative 
  // reflecting on off-diagonal:
  typedef SymTenzor<double,Dim3> ST;
  BConds<ST,Dim3,M3,Cell> tcc;
  // Face 0
  tcc[0]  = new PosReflectFace<ST,Dim3,M3,Cell>(0,0,0);
  tcc[1]  = new PosReflectFace<ST,Dim3,M3,Cell>(0,1,1);
  tcc[2]  = new PosReflectFace<ST,Dim3,M3,Cell>(0,2,2);
  tcc[3]  = new NegReflectFace<ST,Dim3,M3,Cell>(0,1,0);
  tcc[4]  = new NegReflectFace<ST,Dim3,M3,Cell>(0,2,0);
  tcc[5]  = new NegReflectFace<ST,Dim3,M3,Cell>(0,2,1);
  // Face 1
  tcc[6]  = new PosReflectFace<ST,Dim3,M3,Cell>(1,0,0);
  tcc[7]  = new PosReflectFace<ST,Dim3,M3,Cell>(1,1,1);
  tcc[8]  = new PosReflectFace<ST,Dim3,M3,Cell>(1,2,2);
  tcc[9]  = new NegReflectFace<ST,Dim3,M3,Cell>(1,1,0);
  tcc[10] = new NegReflectFace<ST,Dim3,M3,Cell>(1,2,0);
  tcc[11] = new NegReflectFace<ST,Dim3,M3,Cell>(1,2,1);
  // Face 2
  tcc[12] = new PosReflectFace<ST,Dim3,M3,Cell>(2,0,0);
  tcc[13] = new PosReflectFace<ST,Dim3,M3,Cell>(2,1,1);
  tcc[14] = new PosReflectFace<ST,Dim3,M3,Cell>(2,2,2);
  tcc[15] = new NegReflectFace<ST,Dim3,M3,Cell>(2,1,0);
  tcc[16] = new NegReflectFace<ST,Dim3,M3,Cell>(2,2,0);
  tcc[17] = new NegReflectFace<ST,Dim3,M3,Cell>(2,2,1);
  // Face 3
  tcc[18] = new PosReflectFace<ST,Dim3,M3,Cell>(3,0,0);
  tcc[19] = new PosReflectFace<ST,Dim3,M3,Cell>(3,1,1);
  tcc[20] = new PosReflectFace<ST,Dim3,M3,Cell>(3,2,2);
  tcc[21] = new NegReflectFace<ST,Dim3,M3,Cell>(3,1,0);
  tcc[22] = new NegReflectFace<ST,Dim3,M3,Cell>(3,2,0);
  tcc[24] = new NegReflectFace<ST,Dim3,M3,Cell>(3,2,1);

  // Cell-centered test Field's:
  Field<ST,Dim3,M3,Cell> sA(layout3,GuardCellSizes<Dim3>(2),tcc);
  Field<ST,Dim3,M3,Cell> sB(layout3);
  // Assign reference values:
  sA[I][J][K] = (I + J + K);
  // Print reference values, then assign values ofsetting across boundaries
  // and print results, Cell-centered case:
  setFormat(1,2);
  fdi << "++++++++++sA+++++++++++" << endl ;
  fp3(sA);
  sB[I][J][K] = sA[I-2][J][K];
  fdi << "++++++++++sB+++++++++++" << endl ;
  fp3(sB);

  // Componentwise specification of BC's for a Field<Vektor> Set
  // CartesianCenting-centered boundary conditions.  
  // TJW 12/16/97: this differs from earlier one in that it uses
  // NegFeflectZeroFace instead of NegReflectFace. This tests the new
  // NegReflectZeroFace BC, which sets last *physical* layers of vert-centered
  // quantities/components to zero. Another difference from the earlier one: I
  // put in GC and BC on the "B" and (new) "C" Field's, so that BC are applied
  // to the results of the stencil ops.
  BConds<Vektor<double,Dim>,Dim,M,vFace> vfbcz;
  vfbcz[0] = new NegReflectAndZeroFace<Vektor<double,Dim>,Dim,M,vFace>(0,0);
  vfbcz[1] = new        PosReflectFace<Vektor<double,Dim>,Dim,M,vFace>(0,1);
  vfbcz[2] = new NegReflectAndZeroFace<Vektor<double,Dim>,Dim,M,vFace>(1,0);
  vfbcz[3] = new        PosReflectFace<Vektor<double,Dim>,Dim,M,vFace>(1,1);
  vfbcz[4] = new        PosReflectFace<Vektor<double,Dim>,Dim,M,vFace>(2,0);
  vfbcz[5] = new NegReflectAndZeroFace<Vektor<double,Dim>,Dim,M,vFace>(2,1);
  vfbcz[6] = new        PosReflectFace<Vektor<double,Dim>,Dim,M,vFace>(3,0);
  vfbcz[7] = new NegReflectAndZeroFace<Vektor<double,Dim>,Dim,M,vFace>(3,1);
  // vFace-centered test Field's:
  Field<Vektor<double,Dim>,Dim,M,vFace> 
    vfzA(layout,GuardCellSizes<Dim>(2),vfbcz);
  Field<Vektor<double,Dim>,Dim,M,vFace> 
    vfzB(layout,GuardCellSizes<Dim>(2),vfbcz);
  Field<Vektor<double,Dim>,Dim,M,vFace> 
    vfzC(layout,GuardCellSizes<Dim>(2),vfbcz);
  // Assign reference values:
  counter=0;
  value=0.0;
  for (j=0; j<5; j++) {
     for (i=0; i<5; i++) {
       value = counter++;
       assign(vfzA[i][j], (Vektor<double,Dim>)value);
     }
  }
  // Print reference values, then assign values ofsetting across boundaries
  // and print results, vfzace-centered case:
  setFormat(2,2);
  fdi << "++++++++++vfzA+++++++++++" << endl ;
  fp2(vfzA);
  vfzB[I][J] = vfzA[I-2][J];
  fdi << "++++++++++vfzB+++++++++++" << endl ;
  fp2(vfzB);
  vfzC[I][J] = vfzA[I-2][J-2];
  fdi << "++++++++++vfzC+++++++++++" << endl ;
  fp2(vfzC);

  // Test NegReflectZeroFace BC with Vert centering (componentwise BC):
  BConds<Vektor<double,Dim>,Dim,M,Vert> vbcz;
  vbcz[0] = new NegReflectAndZeroFace<Vektor<double,Dim>,Dim,M,Vert>(0,0);
  vbcz[1] = new        PosReflectFace<Vektor<double,Dim>,Dim,M,Vert>(0,1);
  vbcz[2] = new NegReflectAndZeroFace<Vektor<double,Dim>,Dim,M,Vert>(1,0);
  vbcz[3] = new        PosReflectFace<Vektor<double,Dim>,Dim,M,Vert>(1,1);
  vbcz[4] = new        PosReflectFace<Vektor<double,Dim>,Dim,M,Vert>(2,0);
  vbcz[5] = new NegReflectAndZeroFace<Vektor<double,Dim>,Dim,M,Vert>(2,1);
  vbcz[6] = new        PosReflectFace<Vektor<double,Dim>,Dim,M,Vert>(3,0);
  vbcz[7] = new NegReflectAndZeroFace<Vektor<double,Dim>,Dim,M,Vert>(3,1);
  // vFace-centered test Field's:
  Field<Vektor<double,Dim>,Dim,M,Vert> vzA(layout,GuardCellSizes<Dim>(2),vbcz);
  Field<Vektor<double,Dim>,Dim,M,Vert> vzB(layout,GuardCellSizes<Dim>(2),vbcz);
  Field<Vektor<double,Dim>,Dim,M,Vert> vzC(layout,GuardCellSizes<Dim>(2),vbcz);
  // Assign reference values:
  counter=0;
  value=0.0;
  for (j=0; j<5; j++) {
     for (i=0; i<5; i++) {
       value = counter++;
       assign(vzA[i][j], (Vektor<double,Dim>)value);
     }
  }
  // Print reference values, then assign values ofsetting across boundaries
  // and print results, vert-centered case:
  setFormat(2,2);
  fdi << "++++++++++vzA+++++++++++" << endl ;
  fp2(vzA);
  vzB[I][J] = vzA[I-2][J];
  fdi << "++++++++++vzB+++++++++++" << endl ;
  fp2(vzB);
  vzC[I][J] = vzA[I-2][J-2];
  fdi << "++++++++++vzC+++++++++++" << endl ;
  fp2(vzC);

  fdi << endl ; // Needed to flush output to file

  // Write out "by hand" into another file what the previous field-printing
  // functions should have produced; this will be compared with what they
  // actually did produce:
#ifdef __MWERKS__
  // Work around compiler limitation with really long hardCodedOutput()
  // function.
  ofstream of("text.correct.TestBC");
  hardCodedOutput1(of);
  hardCodedOutput2(of);
  hardCodedOutput3(of);
  hardCodedOutput4(of);
  of.close;
#else
  hardCodedOutput("text.correct.TestBC");
#endif // __MWERKS__

  // Compare the two files by mocking up the Unix "diff" command:
  passed = thediff("text.test.TestBC",
		   "text.correct.TestBC");

  testmsg << ( (passed) ? "PASSED" : "FAILED" ) << endl;
  return 0;
}

//-----------------------------------------------------------------------------
// Mock up the Unix "diff" utility to compare two files:
//-----------------------------------------------------------------------------
bool thediff(char* filename1, char* filename2)
{
  bool same = true;
  char ch1, ch2;
  ifstream file1(filename1);
  ifstream file2(filename2);
  while (file1.get(ch1)) {          // Read file 1 char-by-char until eof
    if (file2.get(ch2)) {           // Read equivalent char from file 2
      if (ch1 != ch2) same = false; // If they're different,files are different
    }
    else {
      same = false;                 // If file 2 ends before file 1, different
    }
  }
  return same;
}

#ifdef __MWERKS__
  // Work around compiler limitation with really long hardCodedOutput()
  // function.
//-----------------------------------------------------------------------------
void hardCodedOutput1(ofstream& of)
{
  of << "++++++++BConds object cbc begin++++++++" << endl;
  of << "BConds:(" << endl;
  of << "NegReflectFace, Face=0 , " << endl;
  of << "ZeroFace, Face=1 , " << endl;
  of << "ParallelPeriodicFace, Face=2 , " << endl;
  of << "ParallelPeriodicFace, Face=3" << endl;
  of << ")" << endl;
  of << "" << endl;
  of << "++++++++BConds object cbc end++++++++++" << endl;
  of << "++++++++++cA+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "0.000e+00 1.000e+00 2.000e+00 3.000e+00 4.000e+00 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "5.000e+00 6.000e+00 7.000e+00 8.000e+00 9.000e+00 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "1.000e+01 1.100e+01 1.200e+01 1.300e+01 1.400e+01 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "1.500e+01 1.600e+01 1.700e+01 1.800e+01 1.900e+01 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "2.000e+01 2.100e+01 2.200e+01 2.300e+01 2.400e+01 " << endl;
  of << "" << endl;
  of << "++++++++++cB+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "-1.600e+01 -1.500e+01 1.500e+01 1.600e+01 1.700e+01 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "-2.100e+01 -2.000e+01 2.000e+01 2.100e+01 2.200e+01 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "-1.000e+00 0.000e+00 0.000e+00 1.000e+00 2.000e+00 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "-6.000e+00 -5.000e+00 5.000e+00 6.000e+00 7.000e+00 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "-1.100e+01 -1.000e+01 1.000e+01 1.100e+01 1.200e+01 " << endl;
  of << "" << endl;
  of << "++++++++++vA+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "0.000e+00 1.000e+00 2.000e+00 3.000e+00 4.000e+00 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "5.000e+00 6.000e+00 7.000e+00 8.000e+00 9.000e+00 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "1.000e+01 1.100e+01 1.200e+01 1.300e+01 1.400e+01 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "1.500e+01 1.600e+01 1.700e+01 1.800e+01 1.900e+01 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "0.000e+00 1.000e+00 2.000e+00 3.000e+00 4.000e+00 " << endl;
  of << "" << endl;
  of << "++++++++++vB+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "-1.200e+01 -1.100e+01 1.000e+01 1.100e+01 1.200e+01 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "-1.700e+01 -1.600e+01 1.500e+01 1.600e+01 1.700e+01 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "-2.000e+00 -1.000e+00 0.000e+00 1.000e+00 2.000e+00 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "-7.000e+00 -6.000e+00 5.000e+00 6.000e+00 7.000e+00 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "-1.200e+01 -1.100e+01 1.000e+01 1.100e+01 1.200e+01 " << endl;
  of << "" << endl;
  of << "++++++++++vcA+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 1.00e+00 )" << endl;
  of << "( 2.00e+00 , 2.00e+00 ) ( 3.00e+00 , 3.00e+00 )" << endl;
  of << "( 4.00e+00 , 4.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( 5.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 7.00e+00 , 7.00e+00 ) ( 8.00e+00 , 8.00e+00 )" << endl;
  of << "( 9.00e+00 , 9.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( 1.00e+01 , 1.00e+01 ) ( 1.10e+01 , 1.10e+01 )" << endl;
  of << "( 1.20e+01 , 1.20e+01 ) ( 1.30e+01 , 1.30e+01 )" << endl;
  of << "( 1.40e+01 , 1.40e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( 1.50e+01 , 1.50e+01 ) ( 1.60e+01 , 1.60e+01 )" << endl;
  of << "( 1.70e+01 , 1.70e+01 ) ( 1.80e+01 , 1.80e+01 )" << endl;
  of << "( 1.90e+01 , 1.90e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( 2.00e+01 , 2.00e+01 ) ( 2.10e+01 , 2.10e+01 )" << endl;
  of << "( 2.20e+01 , 2.20e+01 ) ( 2.30e+01 , 2.30e+01 )" << endl;
  of << "( 2.40e+01 , 2.40e+01 ) " << endl;
  of << "" << endl;
  of << "++++++++++vcB+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( -1.00e+00 , 1.00e+00 ) ( 0.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 1.00e+00 )" << endl;
  of << "( 2.00e+00 , 2.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( -6.00e+00 , 6.00e+00 ) ( -5.00e+00 , 5.00e+00 )" << endl;
  of << "( 5.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 7.00e+00 , 7.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( -1.10e+01 , 1.10e+01 ) ( -1.00e+01 , 1.00e+01 )" << endl;
  of << "( 1.00e+01 , 1.00e+01 ) ( 1.10e+01 , 1.10e+01 )" << endl;
  of << "( 1.20e+01 , 1.20e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( -1.60e+01 , 1.60e+01 ) ( -1.50e+01 , 1.50e+01 )" << endl;
  of << "( 1.50e+01 , 1.50e+01 ) ( 1.60e+01 , 1.60e+01 )" << endl;
  of << "( 1.70e+01 , 1.70e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( -2.10e+01 , 2.10e+01 ) ( -2.00e+01 , 2.00e+01 )" << endl;
  of << "( 2.00e+01 , 2.00e+01 ) ( 2.10e+01 , 2.10e+01 )" << endl;
  of << "( 2.20e+01 , 2.20e+01 ) " << endl;
  of << "" << endl;
  /* tjw: omit this test until componentwise ParallelPeriodicFace bug is fixed:
  of << "++++++++++vfA+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 1.00e+00 )" << endl;
  of << "( 2.00e+00 , 2.00e+00 ) ( 3.00e+00 , 3.00e+00 )" << endl;
  of << "( 4.00e+00 , 3.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( 5.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 7.00e+00 , 7.00e+00 ) ( 8.00e+00 , 8.00e+00 )" << endl;
  of << "( 9.00e+00 , 8.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( 1.00e+01 , 1.00e+01 ) ( 1.10e+01 , 1.10e+01 )" << endl;
  of << "( 1.20e+01 , 1.20e+01 ) ( 1.30e+01 , 1.30e+01 )" << endl;
  of << "( 1.40e+01 , 1.30e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( 1.50e+01 , 1.50e+01 ) ( 1.60e+01 , 1.60e+01 )" << endl;
  of << "( 1.70e+01 , 1.70e+01 ) ( 1.80e+01 , 1.80e+01 )" << endl;
  of << "( 1.90e+01 , 1.80e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( 9.99e+00 , 0.00e+00 ) ( 9.99e+00 , 1.00e+00 )" << endl;
  of << "( 9.99e+00 , 2.00e+00 ) ( 9.99e+00 , 3.00e+00 )" << endl;
  of << "( 9.99e+00 , 3.00e+00 ) " << endl;
  of << "" << endl;
  of << "++++++++++vfB+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( -2.00e+00 , 1.00e+00 ) ( -1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 1.00e+00 )" << endl;
  of << "( 2.00e+00 , 2.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( -7.00e+00 , 6.00e+00 ) ( -6.00e+00 , 5.00e+00 )" << endl;
  of << "( 5.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 7.00e+00 , 7.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( -1.20e+01 , 1.10e+01 ) ( -1.10e+01 , 1.00e+01 )" << endl;
  of << "( 1.00e+01 , 1.00e+01 ) ( 1.10e+01 , 1.10e+01 )" << endl;
  of << "( 1.20e+01 , 1.20e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( -1.70e+01 , 1.60e+01 ) ( -1.60e+01 , 1.50e+01 )" << endl;
  of << "( 1.50e+01 , 1.50e+01 ) ( 1.60e+01 , 1.60e+01 )" << endl;
  of << "( 1.70e+01 , 1.70e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( -9.99e+00 , 1.00e+00 ) ( -9.99e+00 , 0.00e+00 )" << endl;
  of << "( 9.99e+00 , 0.00e+00 ) ( 9.99e+00 , 1.00e+00 )" << endl;
  of << "( 9.99e+00 , 2.00e+00 ) " << endl;
  of << "" << endl;
  tjw: omit this test until componentwise ParallelPeriodicFace bug is fixed. */
  of << "++++++++++sA+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "==================================================K = 0" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)";
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)";
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)" << endl;
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "==================================================K = 1" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  return;
}
void hardCodedOutput2(ofstream& of)
{
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "==================================================K = 2" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "==================================================K = 3" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)" << endl;
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)";
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)";
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "==================================================K = 4" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  return;
}
void hardCodedOutput3(ofstream& of)
{
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)" << endl;
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)";
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)";
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)" << endl;
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)";
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)";
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)" << endl;
  of << "(1.20e+01 , 1.20e+01 , 1.20e+01)";
  of << "(1.20e+01 , 1.20e+01 , 1.20e+01)";
  of << "(1.20e+01 , 1.20e+01 , 1.20e+01)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "++++++++++sB+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "==================================================K = 0" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(1.00e+00 , -1.00e+00 , -1.00e+00)";
  of << "(-1.00e+00 , 1.00e+00 , -1.00e+00)";
  of << "(-1.00e+00 , -1.00e+00 , 1.00e+00)" << endl;
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)";
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)";
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)" << endl;
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)";
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)";
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)" << endl;
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(2.00e+00 , -2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , 2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , -2.00e+00 , 2.00e+00)" << endl;
  of << "(1.00e+00 , -1.00e+00 , -1.00e+00)";
  of << "(-1.00e+00 , 1.00e+00 , -1.00e+00)";
  of << "(-1.00e+00 , -1.00e+00 , 1.00e+00)" << endl;
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(3.00e+00 , -3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , 3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , -3.00e+00 , 3.00e+00)" << endl;
  of << "(2.00e+00 , -2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , 2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , -2.00e+00 , 2.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(3.00e+00 , -3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , 3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , -3.00e+00 , 3.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "==================================================K = 1" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(2.00e+00 , -2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , 2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , -2.00e+00 , 2.00e+00)" << endl;
  of << "(1.00e+00 , -1.00e+00 , -1.00e+00)";
  of << "(-1.00e+00 , 1.00e+00 , -1.00e+00)";
  of << "(-1.00e+00 , -1.00e+00 , 1.00e+00)" << endl;
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(3.00e+00 , -3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , 3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , -3.00e+00 , 3.00e+00)" << endl;
  of << "(2.00e+00 , -2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , 2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , -2.00e+00 , 2.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(3.00e+00 , -3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , 3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , -3.00e+00 , 3.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(6.00e+00 , -6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , 6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , -6.00e+00 , 6.00e+00)" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "==================================================K = 2" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(3.00e+00 , -3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , 3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , -3.00e+00 , 3.00e+00)" << endl;
  of << "(2.00e+00 , -2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , 2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , -2.00e+00 , 2.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(3.00e+00 , -3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , 3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , -3.00e+00 , 3.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(6.00e+00 , -6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , 6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , -6.00e+00 , 6.00e+00)" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  return;
}
void hardCodedOutput4(ofstream& of)
{
  of << "(7.00e+00 , -7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , 7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , -7.00e+00 , 7.00e+00)" << endl;
  of << "(6.00e+00 , -6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , 6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , -6.00e+00 , 6.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "==================================================K = 3" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(3.00e+00 , -3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , 3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , -3.00e+00 , 3.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(6.00e+00 , -6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , 6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , -6.00e+00 , 6.00e+00)" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(7.00e+00 , -7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , 7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , -7.00e+00 , 7.00e+00)" << endl;
  of << "(6.00e+00 , -6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , 6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , -6.00e+00 , 6.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(8.00e+00 , -8.00e+00 , -8.00e+00)";
  of << "(-8.00e+00 , 8.00e+00 , -8.00e+00)";
  of << "(-8.00e+00 , -8.00e+00 , 8.00e+00)" << endl;
  of << "(7.00e+00 , -7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , 7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , -7.00e+00 , 7.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "==================================================K = 4" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(6.00e+00 , -6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , 6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , -6.00e+00 , 6.00e+00)" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(7.00e+00 , -7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , 7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , -7.00e+00 , 7.00e+00)" << endl;
  of << "(6.00e+00 , -6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , 6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , -6.00e+00 , 6.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(8.00e+00 , -8.00e+00 , -8.00e+00)";
  of << "(-8.00e+00 , 8.00e+00 , -8.00e+00)";
  of << "(-8.00e+00 , -8.00e+00 , 8.00e+00)" << endl;
  of << "(7.00e+00 , -7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , 7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , -7.00e+00 , 7.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(9.00e+00 , -9.00e+00 , -9.00e+00)";
  of << "(-9.00e+00 , 9.00e+00 , -9.00e+00)";
  of << "(-9.00e+00 , -9.00e+00 , 9.00e+00)" << endl;
  of << "(8.00e+00 , -8.00e+00 , -8.00e+00)";
  of << "(-8.00e+00 , 8.00e+00 , -8.00e+00)";
  of << "(-8.00e+00 , -8.00e+00 , 8.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "++++++++++vfzA+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 0.00e+00 )" << endl;
  of << "( 2.00e+00 , 0.00e+00 ) ( 3.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( 0.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 7.00e+00 , 7.00e+00 ) ( 8.00e+00 , 8.00e+00 )" << endl;
  of << "( 0.00e+00 , 8.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( 0.00e+00 , 1.00e+01 ) ( 1.10e+01 , 1.10e+01 )" << endl;
  of << "( 1.20e+01 , 1.20e+01 ) ( 1.30e+01 , 1.30e+01 )" << endl;
  of << "( 0.00e+00 , 1.30e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( 0.00e+00 , 1.50e+01 ) ( 1.60e+01 , 1.60e+01 )" << endl;
  of << "( 1.70e+01 , 1.70e+01 ) ( 1.80e+01 , 1.80e+01 )" << endl;
  of << "( 0.00e+00 , 1.80e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.60e+01 , 0.00e+00 )" << endl;
  of << "( 1.70e+01 , 0.00e+00 ) ( 1.80e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "++++++++++vfzB+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( 0.00e+00 , 6.00e+00 ) ( -6.00e+00 , 5.00e+00 )" << endl;
  of << "( 0.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 0.00e+00 , 6.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( 0.00e+00 , 1.10e+01 ) ( -1.10e+01 , 1.00e+01 )" << endl;
  of << "( 0.00e+00 , 1.00e+01 ) ( 1.10e+01 , 1.10e+01 )" << endl;
  of << "( 0.00e+00 , 1.10e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( 0.00e+00 , 1.60e+01 ) ( -1.60e+01 , 1.50e+01 )" << endl;
  of << "( 0.00e+00 , 1.50e+01 ) ( 1.60e+01 , 1.60e+01 )" << endl;
  of << "( 0.00e+00 , 1.60e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -1.60e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.60e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "++++++++++vfzC+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -6.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 6.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( 0.00e+00 , -6.00e+00 ) ( -1.00e+00 , -5.00e+00 )" << endl;
  of << "( 0.00e+00 , -5.00e+00 ) ( 1.00e+00 , -6.00e+00 )" << endl;
  of << "( 0.00e+00 , -6.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( 0.00e+00 , 6.00e+00 ) ( -6.00e+00 , 5.00e+00 )" << endl;
  of << "( 0.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 0.00e+00 , 6.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -6.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 6.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "++++++++++vzA+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 0.00e+00 )" << endl;
  of << "( 2.00e+00 , 0.00e+00 ) ( 3.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( 0.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 7.00e+00 , 7.00e+00 ) ( 8.00e+00 , 8.00e+00 )" << endl;
  of << "( 0.00e+00 , 9.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( 0.00e+00 , 1.00e+01 ) ( 1.10e+01 , 1.10e+01 )" << endl;
  of << "( 1.20e+01 , 1.20e+01 ) ( 1.30e+01 , 1.30e+01 )" << endl;
  of << "( 0.00e+00 , 1.40e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( 0.00e+00 , 1.50e+01 ) ( 1.60e+01 , 1.60e+01 )" << endl;
  of << "( 1.70e+01 , 1.70e+01 ) ( 1.80e+01 , 1.80e+01 )" << endl;
  of << "( 0.00e+00 , 1.90e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 2.10e+01 , 0.00e+00 )" << endl;
  of << "( 2.20e+01 , 0.00e+00 ) ( 2.30e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "++++++++++vzB+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( 0.00e+00 , 7.00e+00 ) ( -6.00e+00 , 6.00e+00 )" << endl;
  of << "( 0.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 0.00e+00 , 7.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( 0.00e+00 , 1.20e+01 ) ( -1.10e+01 , 1.10e+01 )" << endl;
  of << "( 0.00e+00 , 1.00e+01 ) ( 1.10e+01 , 1.10e+01 )" << endl;
  of << "( 0.00e+00 , 1.20e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( 0.00e+00 , 1.70e+01 ) ( -1.60e+01 , 1.60e+01 )" << endl;
  of << "( 0.00e+00 , 1.50e+01 ) ( 1.60e+01 , 1.60e+01 )" << endl;
  of << "( 0.00e+00 , 1.70e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -2.10e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 2.10e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "++++++++++vzC+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -1.10e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.10e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( 0.00e+00 , -7.00e+00 ) ( -6.00e+00 , -6.00e+00 )" << endl;
  of << "( 0.00e+00 , -5.00e+00 ) ( 6.00e+00 , -6.00e+00 )" << endl;
  of << "( 0.00e+00 , -7.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( 0.00e+00 , 7.00e+00 ) ( -6.00e+00 , 6.00e+00 )" << endl;
  of << "( 0.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 0.00e+00 , 7.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -1.10e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.10e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "" << endl;;
  return;
}
#else
//-----------------------------------------------------------------------------
void hardCodedOutput(char* filename)
{
  ofstream of(filename);
  of << "++++++++BConds object cbc begin++++++++" << endl;
  of << "BConds:(" << endl;
  of << "NegReflectFace, Face=0 , " << endl;
  of << "ZeroFace, Face=1 , " << endl;
  of << "ParallelPeriodicFace, Face=2 , " << endl;
  of << "ParallelPeriodicFace, Face=3" << endl;
  of << ")" << endl;
  of << "" << endl;
  of << "++++++++BConds object cbc end++++++++++" << endl;
  of << "++++++++++cA+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "0.000e+00 1.000e+00 2.000e+00 3.000e+00 4.000e+00 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "5.000e+00 6.000e+00 7.000e+00 8.000e+00 9.000e+00 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "1.000e+01 1.100e+01 1.200e+01 1.300e+01 1.400e+01 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "1.500e+01 1.600e+01 1.700e+01 1.800e+01 1.900e+01 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "2.000e+01 2.100e+01 2.200e+01 2.300e+01 2.400e+01 " << endl;
  of << "" << endl;
  of << "++++++++++cB+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "-1.600e+01 -1.500e+01 1.500e+01 1.600e+01 1.700e+01 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "-2.100e+01 -2.000e+01 2.000e+01 2.100e+01 2.200e+01 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "-1.000e+00 0.000e+00 0.000e+00 1.000e+00 2.000e+00 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "-6.000e+00 -5.000e+00 5.000e+00 6.000e+00 7.000e+00 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "-1.100e+01 -1.000e+01 1.000e+01 1.100e+01 1.200e+01 " << endl;
  of << "" << endl;
  of << "++++++++++vA+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "0.000e+00 1.000e+00 2.000e+00 3.000e+00 4.000e+00 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "5.000e+00 6.000e+00 7.000e+00 8.000e+00 9.000e+00 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "1.000e+01 1.100e+01 1.200e+01 1.300e+01 1.400e+01 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "1.500e+01 1.600e+01 1.700e+01 1.800e+01 1.900e+01 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "0.000e+00 1.000e+00 2.000e+00 3.000e+00 4.000e+00 " << endl;
  of << "" << endl;
  of << "++++++++++vB+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "-1.200e+01 -1.100e+01 1.000e+01 1.100e+01 1.200e+01 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "-1.700e+01 -1.600e+01 1.500e+01 1.600e+01 1.700e+01 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "-2.000e+00 -1.000e+00 0.000e+00 1.000e+00 2.000e+00 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "-7.000e+00 -6.000e+00 5.000e+00 6.000e+00 7.000e+00 " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "-1.200e+01 -1.100e+01 1.000e+01 1.100e+01 1.200e+01 " << endl;
  of << "" << endl;
  of << "++++++++++vcA+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 1.00e+00 )" << endl;
  of << "( 2.00e+00 , 2.00e+00 ) ( 3.00e+00 , 3.00e+00 )" << endl;
  of << "( 4.00e+00 , 4.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( 5.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 7.00e+00 , 7.00e+00 ) ( 8.00e+00 , 8.00e+00 )" << endl;
  of << "( 9.00e+00 , 9.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( 1.00e+01 , 1.00e+01 ) ( 1.10e+01 , 1.10e+01 )" << endl;
  of << "( 1.20e+01 , 1.20e+01 ) ( 1.30e+01 , 1.30e+01 )" << endl;
  of << "( 1.40e+01 , 1.40e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( 1.50e+01 , 1.50e+01 ) ( 1.60e+01 , 1.60e+01 )" << endl;
  of << "( 1.70e+01 , 1.70e+01 ) ( 1.80e+01 , 1.80e+01 )" << endl;
  of << "( 1.90e+01 , 1.90e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( 2.00e+01 , 2.00e+01 ) ( 2.10e+01 , 2.10e+01 )" << endl;
  of << "( 2.20e+01 , 2.20e+01 ) ( 2.30e+01 , 2.30e+01 )" << endl;
  of << "( 2.40e+01 , 2.40e+01 ) " << endl;
  of << "" << endl;
  of << "++++++++++vcB+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( -1.00e+00 , 1.00e+00 ) ( 0.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 1.00e+00 )" << endl;
  of << "( 2.00e+00 , 2.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( -6.00e+00 , 6.00e+00 ) ( -5.00e+00 , 5.00e+00 )" << endl;
  of << "( 5.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 7.00e+00 , 7.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( -1.10e+01 , 1.10e+01 ) ( -1.00e+01 , 1.00e+01 )" << endl;
  of << "( 1.00e+01 , 1.00e+01 ) ( 1.10e+01 , 1.10e+01 )" << endl;
  of << "( 1.20e+01 , 1.20e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( -1.60e+01 , 1.60e+01 ) ( -1.50e+01 , 1.50e+01 )" << endl;
  of << "( 1.50e+01 , 1.50e+01 ) ( 1.60e+01 , 1.60e+01 )" << endl;
  of << "( 1.70e+01 , 1.70e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( -2.10e+01 , 2.10e+01 ) ( -2.00e+01 , 2.00e+01 )" << endl;
  of << "( 2.00e+01 , 2.00e+01 ) ( 2.10e+01 , 2.10e+01 )" << endl;
  of << "( 2.20e+01 , 2.20e+01 ) " << endl;
  of << "" << endl;
  /* tjw: omit this test until componentwise ParallelPeriodicFace bug is fixed:
  of << "++++++++++vfA+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 1.00e+00 )" << endl;
  of << "( 2.00e+00 , 2.00e+00 ) ( 3.00e+00 , 3.00e+00 )" << endl;
  of << "( 4.00e+00 , 3.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( 5.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 7.00e+00 , 7.00e+00 ) ( 8.00e+00 , 8.00e+00 )" << endl;
  of << "( 9.00e+00 , 8.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( 1.00e+01 , 1.00e+01 ) ( 1.10e+01 , 1.10e+01 )" << endl;
  of << "( 1.20e+01 , 1.20e+01 ) ( 1.30e+01 , 1.30e+01 )" << endl;
  of << "( 1.40e+01 , 1.30e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( 1.50e+01 , 1.50e+01 ) ( 1.60e+01 , 1.60e+01 )" << endl;
  of << "( 1.70e+01 , 1.70e+01 ) ( 1.80e+01 , 1.80e+01 )" << endl;
  of << "( 1.90e+01 , 1.80e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( 9.99e+00 , 0.00e+00 ) ( 9.99e+00 , 1.00e+00 )" << endl;
  of << "( 9.99e+00 , 2.00e+00 ) ( 9.99e+00 , 3.00e+00 )" << endl;
  of << "( 9.99e+00 , 3.00e+00 ) " << endl;
  of << "" << endl;
  of << "++++++++++vfB+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( -2.00e+00 , 1.00e+00 ) ( -1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 1.00e+00 )" << endl;
  of << "( 2.00e+00 , 2.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( -7.00e+00 , 6.00e+00 ) ( -6.00e+00 , 5.00e+00 )" << endl;
  of << "( 5.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 7.00e+00 , 7.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( -1.20e+01 , 1.10e+01 ) ( -1.10e+01 , 1.00e+01 )" << endl;
  of << "( 1.00e+01 , 1.00e+01 ) ( 1.10e+01 , 1.10e+01 )" << endl;
  of << "( 1.20e+01 , 1.20e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( -1.70e+01 , 1.60e+01 ) ( -1.60e+01 , 1.50e+01 )" << endl;
  of << "( 1.50e+01 , 1.50e+01 ) ( 1.60e+01 , 1.60e+01 )" << endl;
  of << "( 1.70e+01 , 1.70e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( -9.99e+00 , 1.00e+00 ) ( -9.99e+00 , 0.00e+00 )" << endl;
  of << "( 9.99e+00 , 0.00e+00 ) ( 9.99e+00 , 1.00e+00 )" << endl;
  of << "( 9.99e+00 , 2.00e+00 ) " << endl;
  of << "" << endl;
  tjw: omit this test until componentwise ParallelPeriodicFace bug is fixed. */
  of << "++++++++++sA+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "==================================================K = 0" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)";
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)";
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)" << endl;
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "==================================================K = 1" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "==================================================K = 2" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "==================================================K = 3" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)" << endl;
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)";
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)";
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "==================================================K = 4" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)" << endl;
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)";
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)";
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)" << endl;
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)";
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)";
  of << "(1.10e+01 , 1.10e+01 , 1.10e+01)" << endl;
  of << "(1.20e+01 , 1.20e+01 , 1.20e+01)";
  of << "(1.20e+01 , 1.20e+01 , 1.20e+01)";
  of << "(1.20e+01 , 1.20e+01 , 1.20e+01)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "++++++++++sB+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "==================================================K = 0" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(1.00e+00 , -1.00e+00 , -1.00e+00)";
  of << "(-1.00e+00 , 1.00e+00 , -1.00e+00)";
  of << "(-1.00e+00 , -1.00e+00 , 1.00e+00)" << endl;
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)";
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)";
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)" << endl;
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)";
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)";
  of << "(0.00e+00 , 0.00e+00 , 0.00e+00)" << endl;
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(2.00e+00 , -2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , 2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , -2.00e+00 , 2.00e+00)" << endl;
  of << "(1.00e+00 , -1.00e+00 , -1.00e+00)";
  of << "(-1.00e+00 , 1.00e+00 , -1.00e+00)";
  of << "(-1.00e+00 , -1.00e+00 , 1.00e+00)" << endl;
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(3.00e+00 , -3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , 3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , -3.00e+00 , 3.00e+00)" << endl;
  of << "(2.00e+00 , -2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , 2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , -2.00e+00 , 2.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(3.00e+00 , -3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , 3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , -3.00e+00 , 3.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "==================================================K = 1" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(2.00e+00 , -2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , 2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , -2.00e+00 , 2.00e+00)" << endl;
  of << "(1.00e+00 , -1.00e+00 , -1.00e+00)";
  of << "(-1.00e+00 , 1.00e+00 , -1.00e+00)";
  of << "(-1.00e+00 , -1.00e+00 , 1.00e+00)" << endl;
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)";
  of << "(1.00e+00 , 1.00e+00 , 1.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(3.00e+00 , -3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , 3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , -3.00e+00 , 3.00e+00)" << endl;
  of << "(2.00e+00 , -2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , 2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , -2.00e+00 , 2.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(3.00e+00 , -3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , 3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , -3.00e+00 , 3.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(6.00e+00 , -6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , 6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , -6.00e+00 , 6.00e+00)" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "==================================================K = 2" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(3.00e+00 , -3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , 3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , -3.00e+00 , 3.00e+00)" << endl;
  of << "(2.00e+00 , -2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , 2.00e+00 , -2.00e+00)";
  of << "(-2.00e+00 , -2.00e+00 , 2.00e+00)" << endl;
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)";
  of << "(2.00e+00 , 2.00e+00 , 2.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(3.00e+00 , -3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , 3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , -3.00e+00 , 3.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(6.00e+00 , -6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , 6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , -6.00e+00 , 6.00e+00)" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(7.00e+00 , -7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , 7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , -7.00e+00 , 7.00e+00)" << endl;
  of << "(6.00e+00 , -6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , 6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , -6.00e+00 , 6.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "==================================================K = 3" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(3.00e+00 , -3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , 3.00e+00 , -3.00e+00)";
  of << "(-3.00e+00 , -3.00e+00 , 3.00e+00)" << endl;
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)";
  of << "(3.00e+00 , 3.00e+00 , 3.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(6.00e+00 , -6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , 6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , -6.00e+00 , 6.00e+00)" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(7.00e+00 , -7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , 7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , -7.00e+00 , 7.00e+00)" << endl;
  of << "(6.00e+00 , -6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , 6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , -6.00e+00 , 6.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(8.00e+00 , -8.00e+00 , -8.00e+00)";
  of << "(-8.00e+00 , 8.00e+00 , -8.00e+00)";
  of << "(-8.00e+00 , -8.00e+00 , 8.00e+00)" << endl;
  of << "(7.00e+00 , -7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , 7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , -7.00e+00 , 7.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "==================================================K = 4" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(4.00e+00 , -4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , 4.00e+00 , -4.00e+00)";
  of << "(-4.00e+00 , -4.00e+00 , 4.00e+00)" << endl;
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)";
  of << "(4.00e+00 , 4.00e+00 , 4.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "(6.00e+00 , -6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , 6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , -6.00e+00 , 6.00e+00)" << endl;
  of << "(5.00e+00 , -5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , 5.00e+00 , -5.00e+00)";
  of << "(-5.00e+00 , -5.00e+00 , 5.00e+00)" << endl;
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)";
  of << "(5.00e+00 , 5.00e+00 , 5.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "(7.00e+00 , -7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , 7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , -7.00e+00 , 7.00e+00)" << endl;
  of << "(6.00e+00 , -6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , 6.00e+00 , -6.00e+00)";
  of << "(-6.00e+00 , -6.00e+00 , 6.00e+00)" << endl;
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)";
  of << "(6.00e+00 , 6.00e+00 , 6.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "(8.00e+00 , -8.00e+00 , -8.00e+00)";
  of << "(-8.00e+00 , 8.00e+00 , -8.00e+00)";
  of << "(-8.00e+00 , -8.00e+00 , 8.00e+00)" << endl;
  of << "(7.00e+00 , -7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , 7.00e+00 , -7.00e+00)";
  of << "(-7.00e+00 , -7.00e+00 , 7.00e+00)" << endl;
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)";
  of << "(7.00e+00 , 7.00e+00 , 7.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "(9.00e+00 , -9.00e+00 , -9.00e+00)";
  of << "(-9.00e+00 , 9.00e+00 , -9.00e+00)";
  of << "(-9.00e+00 , -9.00e+00 , 9.00e+00)" << endl;
  of << "(8.00e+00 , -8.00e+00 , -8.00e+00)";
  of << "(-8.00e+00 , 8.00e+00 , -8.00e+00)";
  of << "(-8.00e+00 , -8.00e+00 , 8.00e+00)" << endl;
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)";
  of << "(8.00e+00 , 8.00e+00 , 8.00e+00)" << endl;
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)";
  of << "(9.00e+00 , 9.00e+00 , 9.00e+00)" << endl;
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)";
  of << "(1.00e+01 , 1.00e+01 , 1.00e+01)" << endl;
  of << "" << endl;
  of << "" << endl;
  of << "++++++++++vfzA+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 0.00e+00 )" << endl;
  of << "( 2.00e+00 , 0.00e+00 ) ( 3.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( 0.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 7.00e+00 , 7.00e+00 ) ( 8.00e+00 , 8.00e+00 )" << endl;
  of << "( 0.00e+00 , 8.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( 0.00e+00 , 1.00e+01 ) ( 1.10e+01 , 1.10e+01 )" << endl;
  of << "( 1.20e+01 , 1.20e+01 ) ( 1.30e+01 , 1.30e+01 )" << endl;
  of << "( 0.00e+00 , 1.30e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( 0.00e+00 , 1.50e+01 ) ( 1.60e+01 , 1.60e+01 )" << endl;
  of << "( 1.70e+01 , 1.70e+01 ) ( 1.80e+01 , 1.80e+01 )" << endl;
  of << "( 0.00e+00 , 1.80e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.60e+01 , 0.00e+00 )" << endl;
  of << "( 1.70e+01 , 0.00e+00 ) ( 1.80e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "++++++++++vfzB+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( 0.00e+00 , 6.00e+00 ) ( -6.00e+00 , 5.00e+00 )" << endl;
  of << "( 0.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 0.00e+00 , 6.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( 0.00e+00 , 1.10e+01 ) ( -1.10e+01 , 1.00e+01 )" << endl;
  of << "( 0.00e+00 , 1.00e+01 ) ( 1.10e+01 , 1.10e+01 )" << endl;
  of << "( 0.00e+00 , 1.10e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( 0.00e+00 , 1.60e+01 ) ( -1.60e+01 , 1.50e+01 )" << endl;
  of << "( 0.00e+00 , 1.50e+01 ) ( 1.60e+01 , 1.60e+01 )" << endl;
  of << "( 0.00e+00 , 1.60e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -1.60e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.60e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "++++++++++vfzC+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -6.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 6.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( 0.00e+00 , -6.00e+00 ) ( -1.00e+00 , -5.00e+00 )" << endl;
  of << "( 0.00e+00 , -5.00e+00 ) ( 1.00e+00 , -6.00e+00 )" << endl;
  of << "( 0.00e+00 , -6.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( 0.00e+00 , 6.00e+00 ) ( -6.00e+00 , 5.00e+00 )" << endl;
  of << "( 0.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 0.00e+00 , 6.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -6.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 6.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "++++++++++vzA+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 0.00e+00 )" << endl;
  of << "( 2.00e+00 , 0.00e+00 ) ( 3.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( 0.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 7.00e+00 , 7.00e+00 ) ( 8.00e+00 , 8.00e+00 )" << endl;
  of << "( 0.00e+00 , 9.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( 0.00e+00 , 1.00e+01 ) ( 1.10e+01 , 1.10e+01 )" << endl;
  of << "( 1.20e+01 , 1.20e+01 ) ( 1.30e+01 , 1.30e+01 )" << endl;
  of << "( 0.00e+00 , 1.40e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( 0.00e+00 , 1.50e+01 ) ( 1.60e+01 , 1.60e+01 )" << endl;
  of << "( 1.70e+01 , 1.70e+01 ) ( 1.80e+01 , 1.80e+01 )" << endl;
  of << "( 0.00e+00 , 1.90e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 2.10e+01 , 0.00e+00 )" << endl;
  of << "( 2.20e+01 , 0.00e+00 ) ( 2.30e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "++++++++++vzB+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( 0.00e+00 , 7.00e+00 ) ( -6.00e+00 , 6.00e+00 )" << endl;
  of << "( 0.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 0.00e+00 , 7.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( 0.00e+00 , 1.20e+01 ) ( -1.10e+01 , 1.10e+01 )" << endl;
  of << "( 0.00e+00 , 1.00e+01 ) ( 1.10e+01 , 1.10e+01 )" << endl;
  of << "( 0.00e+00 , 1.20e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( 0.00e+00 , 1.70e+01 ) ( -1.60e+01 , 1.60e+01 )" << endl;
  of << "( 0.00e+00 , 1.50e+01 ) ( 1.60e+01 , 1.60e+01 )" << endl;
  of << "( 0.00e+00 , 1.70e+01 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -2.10e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 2.10e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "++++++++++vzC+++++++++++" << endl;
  of << "~~~~~~~~ field slice (0:4:1, 0:4:1) ~~~~~~~~" << endl;
  of << "--------------------------------------------------J = 0" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -1.10e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.10e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 1" << endl;
  of << "( 0.00e+00 , -7.00e+00 ) ( -6.00e+00 , -6.00e+00 )" << endl;
  of << "( 0.00e+00 , -5.00e+00 ) ( 6.00e+00 , -6.00e+00 )" << endl;
  of << "( 0.00e+00 , -7.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 2" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.00e+00 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 3" << endl;
  of << "( 0.00e+00 , 7.00e+00 ) ( -6.00e+00 , 6.00e+00 )" << endl;
  of << "( 0.00e+00 , 5.00e+00 ) ( 6.00e+00 , 6.00e+00 )" << endl;
  of << "( 0.00e+00 , 7.00e+00 ) " << endl;
  of << "" << endl;
  of << "--------------------------------------------------J = 4" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( -1.10e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) ( 1.10e+01 , 0.00e+00 )" << endl;
  of << "( 0.00e+00 , 0.00e+00 ) " << endl;
  of << "" << endl;
  of << "" << endl;;

  of.close();
  return;
}
#endif // __MWERKS__

/***************************************************************************
 * $RCSfile: TestBC.cpp,v $   $Author: adelmann $
 * $Revision: 1.1.1.1 $   $Date: 2003/01/23 07:40:38 $
 * IPPL_VERSION_ID: $Id: TestBC.cpp,v 1.1.1.1 2003/01/23 07:40:38 adelmann Exp $ 
 ***************************************************************************/
