// -*- C++ -*-
/***************************************************************************
 *
 * The IPPL Framework
 * 
 * This program was prepared by the Regents of the University of
 * California at Los Alamos National Laboratory (the University) under
 * Contract No.  W-7405-ENG-36 with the U.S. Department of Energy (DOE).
 * The University has certain rights in the program pursuant to the
 * contract and the program should not be copied or distributed outside
 * your organization.  All rights in the program are reserved by the DOE
 * and the University.  Neither the U.S.  Government nor the University
 * makes any warranty, express or implied, or assumes any liability or
 * responsibility for the use of this software
 *
 * Visit http://people.web.psi.ch/adelmann/ for more details
 *
 ***************************************************************************/

// TestFFT.cpp , Tim Williams 1/27/1997
// Updated by Julian Cummings, 3/31/98

// Tests the use of the (parallel) FFT class.

#include "Ippl.h"

#ifdef IPPL_USE_STANDARD_HEADERS
#include <complex>
using namespace std;
#else
#include <complex.h>
#endif

int main(int argc, char *argv[])
{
  TAU_PROFILE("main()", "int (int, char **)", TAU_DEFAULT);
  Ippl ippl(argc,argv);
  Inform testmsg(NULL,0);

  // Hardwire dimensionality by setting cpp definition ONED, TWOD, or THREED:
#define THREED

  // The preceding cpp definition causes compile-time setting of D:
#if defined(ONED)
  const unsigned D=1U;
#elif defined(TWOD)
  const unsigned D=2U;
#elif defined(THREED)
  const unsigned D=3U;
#endif  
  testmsg << "%%%%%%% Dimensionality: D = " << D << " %%%%%%%" << endl;
  
  unsigned ngrid[D];   // grid sizes

  // Used in evaluating correctness of results:
  double realDiff;
  const double errorTol = 1.0e-10;
  bool correct = true;

  // Various counters, constants, etc:
  int d;
  int Parent = 0;
  int tag = Ippl::Comm->next_tag(IPPL_APP_TAG0);
  double pi = acos(-1.0);
  double twopi = 2.0*pi;
  // Timer:
  Timer timer;
  bool constInput;  // preserve input field in two-field transform

  // Layout information:
  unsigned vnodes;             // number of vnodes; input at cmd line
  e_dim_tag allParallel[D];    // Specifies SERIAL, PARALLEL dims
  for (d=0; d<D; d++) allParallel[d] = PARALLEL;
#ifndef ONED
  e_dim_tag serialParallel[D]; // Specifies SERIAL, PARALLEL dims
  serialParallel[0] = SERIAL;
  for (d=1; d<D; d++) serialParallel[d] = PARALLEL;
#endif

  // Compression of temporaries:
  bool compressTemps;

  // ================BEGIN INTERACTION LOOP====================================
  while (true) {

    // read in vnodes etc. off of node 0
    if( Ippl::Comm->myNode() == Parent ) {
      bool vnodesOK = false;
      while (!vnodesOK) {
        cout << "Enter vnodes (0 to exit): ";
        cin >> vnodes;
        if (vnodes==0 || vnodes>=Ippl::getNodes())
          vnodesOK = true;
        else
          cout << "Number of vnodes should not be less than number of pnodes!"
               << endl;
      }
      if (vnodes > 0) {
	cout << "Compress temps? (Enter 1 for true or 0 false): ";
	int tempWorkaroundBoolIO;
	cin >> tempWorkaroundBoolIO;
	if (tempWorkaroundBoolIO == 0)
	  compressTemps = false;
        else
	  compressTemps = true;
	cout << "Constant input fields? (Enter 1 for true or 0 false): ";
	cin >> tempWorkaroundBoolIO;
	if (tempWorkaroundBoolIO == 0)
	  constInput = false;
        else
	  constInput = true;
#if defined(ONED)
	cout << "input nx: ";
#elif defined(TWOD)
	cout << "input nx, ny; space-delimited: ";
#elif defined(THREED)
	cout << "input nx, ny, and nz; space-delimited: ";
#endif
	for (d=0; d<D; d++) cin >> ngrid[d];
      }
      // now broadcast data to other nodes
      Message *mess = new Message();
      putMessage( *mess, vnodes );
      if (vnodes > 0) {
	putMessage(*mess, compressTemps);
	putMessage(*mess, constInput);
	for (d=0; d<D; d++) putMessage( *mess, ngrid[d] );
      }
      Ippl::Comm->broadcast_all(mess, tag);
    }
    // now each node recieves the data
    unsigned pe = Ippl::Comm->myNode();
    Message *mess = Ippl::Comm->receive_block(Parent, tag);
    PAssert(mess);
    getMessage( *mess, vnodes );
    if (vnodes <= 0) break;
    getMessage(*mess, compressTemps);
    getMessage(*mess, constInput);
    for (d=0; d<D; d++) getMessage( *mess, ngrid[d] );
    delete mess;

    //------------------------complex<-->complex-------------------------------
    // Complex test Fields

    // create standard domain
    NDIndex<D> ndiStandard;
    for (d=0; d<D; d++) ndiStandard[d] = Index(ngrid[d]);
#ifndef ONED
    // create new domain with axes permuted to match FFT output
    NDIndex<D> ndiPermuted;
    ndiPermuted[0] = ndiStandard[D-1];
    for (d=1; d<D; d++) ndiPermuted[d] = ndiStandard[d-1];
#endif

    // create half-size domain for RC transform along zeroth axis
    NDIndex<D> ndiStandard0h = ndiStandard;
    ndiStandard0h[0] = Index(ngrid[0]/2+1);
#ifndef ONED
    // create new domain with axes permuted to match FFT output
    NDIndex<D> ndiPermuted0h;
    ndiPermuted0h[0] = ndiStandard0h[D-1];
    for (d=1; d<D; d++) ndiPermuted0h[d] = ndiStandard0h[d-1];
#endif

    // create half-size domain for sine transform along zeroth axis
    // and RC transform along first axis
    NDIndex<D> ndiStandard1h = ndiStandard;
    ndiStandard1h[1] = Index(ngrid[1]/2+1);
#ifndef ONED
    // create new domain with axes permuted to match FFT output
    NDIndex<D> ndiPermuted1h;
    ndiPermuted1h[0] = ndiStandard1h[D-1];
    for (d=1; d<D; d++) ndiPermuted1h[d] = ndiStandard1h[d-1];
#endif

    // all parallel layout, standard domain, normal axis order
    FieldLayout<D> layoutPPStan(ndiStandard,allParallel,vnodes);
#ifndef ONED
    // zeroth axis serial, standard domain, normal axis order
    FieldLayout<D> layoutSPStan(ndiStandard,serialParallel,vnodes);
    // zeroth axis serial, standard domain, permuted axis order
    FieldLayout<D> layoutSPPerm(ndiPermuted,serialParallel,vnodes);
#endif
    // all parallel layout, zeroth axis half-size domain, normal axis order
    FieldLayout<D> layoutPPStan0h(ndiStandard0h,allParallel,vnodes);
#ifndef ONED
    // zeroth axis serial, zeroth axis half-size domain, normal axis order
    FieldLayout<D> layoutSPStan0h(ndiStandard0h,serialParallel,vnodes);
    // zeroth axis serial, zeroth axis half-size domain, permuted axis order
    FieldLayout<D> layoutSPPerm0h(ndiPermuted0h,serialParallel,vnodes);
#endif
    // all parallel layout, first axis half-size domain, normal axis order
    FieldLayout<D> layoutPPStan1h(ndiStandard1h,allParallel,vnodes);
#ifndef ONED
    // zeroth axis serial, first axis half-size domain, normal axis order
    FieldLayout<D> layoutSPStan1h(ndiStandard1h,serialParallel,vnodes);
    // zeroth axis serial, first axis half-size domain, permuted axis order
    FieldLayout<D> layoutSPPerm1h(ndiPermuted1h,serialParallel,vnodes);
#endif

    // create test Fields for complex-to-complex FFT
    BareField<dcomplex,D> CFieldPPStan(layoutPPStan);
    BareField<dcomplex,D> CFieldPPStan_save(layoutPPStan);
    BareField<double,D> diffFieldPPStan(layoutPPStan);
#ifndef ONED
    BareField<dcomplex,D> CFieldSPStan(layoutSPStan);
    BareField<dcomplex,D> CFieldSPStan_save(layoutSPStan);
    BareField<double,D> diffFieldSPStan(layoutSPStan);
    BareField<dcomplex,D> CFieldSPPerm(layoutSPPerm);
#endif

    // create test Fields for real-to-complex FFT
    BareField<double,D> RFieldPPStan(layoutPPStan);
    BareField<double,D> RFieldPPStan_save(layoutPPStan);
    BareField<dcomplex,D> CFieldPPStan0h(layoutPPStan0h);
#ifndef ONED
    BareField<double,D> RFieldSPStan(layoutSPStan);
    BareField<double,D> RFieldSPStan_save(layoutSPStan);
    BareField<dcomplex,D> CFieldSPStan0h(layoutSPStan0h);
    BareField<dcomplex,D> CFieldSPPerm0h(layoutSPPerm0h);
#endif

    // create test Fields for sine transform and real-to-complex FFT
    BareField<dcomplex,D> CFieldPPStan1h(layoutPPStan1h);
#ifndef ONED
    BareField<dcomplex,D> CFieldSPStan1h(layoutSPStan1h);
    BareField<dcomplex,D> CFieldSPPerm1h(layoutSPPerm1h);
#endif

    // For calling FieldDebug functions from debugger, set up output format:
    setFormat(4,3);

// Rather more complete test functions (sine or cosine mode):
    dcomplex sfact(1.0,0.0);      // (1,0) for sine mode; (0,0) for cosine mode
    dcomplex cfact(0.0,0.0);      // (0,0) for sine mode; (1,0) for cosine mode
// Conditionally-compiled loading functions (couldn't make these
// dimensionality independent --TJW):
#if defined(ONED)
    double xfact, kx;
    xfact = pi/(ngrid[0] + 1.0);
    kx = 1.0; // wavenumber
    CFieldPPStan[ndiStandard[0]] =
      sfact * ( sin( (ndiStandard[0]+1) * kx * xfact ) ) + 
      cfact * ( cos( (ndiStandard[0]+1) * kx * xfact ) );
#elif defined(TWOD)
    double xfact, kx, yfact, ky;
    xfact = pi/(ngrid[0] + 1.0);
    yfact = 2.0*twopi/(ngrid[1]);
    kx = 1.0; ky = 2.0;  // wavenumbers
    CFieldPPStan[ndiStandard[0]][ndiStandard[1]] =
      sfact * ( sin( (ndiStandard[0]+1) * kx * xfact +
                      ndiStandard[1]    * ky * yfact ) +
		sin( (ndiStandard[0]+1) * kx * xfact -
                      ndiStandard[1]    * ky * yfact ) ) + 
      cfact * (-cos( (ndiStandard[0]+1) * kx * xfact +
                      ndiStandard[1]    * ky * yfact ) + 
		cos( (ndiStandard[0]+1) * kx * xfact -
                      ndiStandard[1]    * ky * yfact ) );
#elif defined(THREED)
    double xfact, kx, yfact, ky, zfact, kz;
    xfact = pi/(ngrid[0] + 1.0);
    yfact = 2.0*twopi/(ngrid[1]);
    zfact = 2.0*twopi/(ngrid[2]);
    kx = 1.0; ky = 2.0; kz = 3.0; // wavenumbers
    CFieldPPStan[ndiStandard[0]][ndiStandard[1]][ndiStandard[2]] = 
      sfact * ( sin( (ndiStandard[0]+1) * kx * xfact +
                      ndiStandard[1]    * ky * yfact +
                      ndiStandard[2]    * kz * zfact ) +
		sin( (ndiStandard[0]+1) * kx * xfact -
                      ndiStandard[1]    * ky * yfact -
                      ndiStandard[2]    * kz * zfact ) ) + 
      cfact * (-cos( (ndiStandard[0]+1) * kx * xfact +
                      ndiStandard[1]    * ky * yfact +
                      ndiStandard[2]    * kz * zfact ) + 
		cos( (ndiStandard[0]+1) * kx * xfact -
                      ndiStandard[1]    * ky * yfact -
                      ndiStandard[2]    * kz * zfact ) );
#endif

#ifndef ONED
    CFieldSPStan = CFieldPPStan;
    CFieldSPPerm = dcomplex(0.0,0.0);
#endif

    CFieldPPStan_save = CFieldPPStan; // Save values for checking later
#ifndef ONED
    CFieldSPStan_save = CFieldSPStan;
#endif

    // CC FFT tests

    // Instantiate complex<-->complex FFT object
    // Transform in all directions
    FFT<CCTransform,D,double> ccfft(ndiStandard, compressTemps);

#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    int forward = +1;
    int inverse = -1;
#else
    // set direction names
    ccfft.setDirectionName(+1, "forward");
    ccfft.setDirectionName(-1, "inverse");
#endif

    testmsg << "In-place CC transform using all-parallel layout ..." << endl;
    timer.start();
    // Test complex<-->complex transform (simple test: forward then inverse
    // transform, see if get back original values.
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " about to invoke forward FFT::transform()" << endl;
#endif
    testmsg << "Forward transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    ccfft.transform(forward, CFieldPPStan);
#else
    ccfft.transform("forward", CFieldPPStan);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
    cout << "PE " << pe << " about to invoke inverse FFT::transform()" << endl;
#endif
    testmsg << "Inverse transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    ccfft.transform(inverse, CFieldPPStan);
#else
    ccfft.transform("inverse", CFieldPPStan);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
#endif
    timer.stop();

    diffFieldPPStan = Abs(CFieldPPStan - CFieldPPStan_save);
    realDiff = max(diffFieldPPStan);
    if (fabs(realDiff) > errorTol) {
      correct = false;
      testmsg << "fabs(realDiff) = " << fabs(realDiff) << endl;
    }
    testmsg << "CPU time used = " << timer.cpu_time() << " secs." << endl;
    timer.clear();
    //-------------------------------------------------------------------------

#ifndef ONED
    testmsg << "In-place CC transform using layout with zeroth dim serial ..." << endl;
    timer.start();
    // Test complex<-->complex transform (simple test: forward then inverse
    // transform, see if get back original values.
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " about to invoke forward FFT::transform()" << endl;
#endif
    testmsg << "Forward transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    ccfft.transform(forward, CFieldSPStan);
#else
    ccfft.transform("forward", CFieldSPStan);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
    cout << "PE " << pe << " about to invoke inverse FFT::transform()" << endl;
#endif
    testmsg << "Inverse transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    ccfft.transform(inverse, CFieldSPStan);
#else
    ccfft.transform("inverse", CFieldSPStan);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
#endif
    timer.stop();

    diffFieldSPStan = Abs(CFieldSPStan - CFieldSPStan_save);
    realDiff = max(diffFieldSPStan);
    if (fabs(realDiff) > errorTol) {
      correct = false;
      testmsg << "fabs(realDiff) = " << fabs(realDiff) << endl;
    }
    testmsg << "CPU time used = " << timer.cpu_time() << " secs." << endl;
    timer.clear();
    //-------------------------------------------------------------------------
    CFieldSPStan = CFieldSPStan_save;  // restore field, just in case ...

    testmsg << "Two-field CC transform using layout with permuted axes ..." << endl;
    timer.start();
    // Test complex<-->complex transform (simple test: forward then inverse
    // transform, see if get back original values.
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " about to invoke forward FFT::transform()" << endl;
#endif
    testmsg << "Forward transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    ccfft.transform(forward, CFieldSPStan, CFieldSPPerm, constInput);
#else
    ccfft.transform("forward", CFieldSPStan, CFieldSPPerm, constInput);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
    cout << "PE " << pe << " about to invoke inverse FFT::transform()" << endl;
#endif
    testmsg << "Inverse transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    ccfft.transform(inverse, CFieldSPPerm, CFieldSPStan, constInput);
#else
    ccfft.transform("inverse", CFieldSPPerm, CFieldSPStan, constInput);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
#endif
    timer.stop();

    diffFieldSPStan = Abs(CFieldSPStan - CFieldSPStan_save);
    realDiff = max(diffFieldSPStan);
    if (fabs(realDiff) > errorTol) {
      correct = false;
      testmsg << "fabs(realDiff) = " << fabs(realDiff) << endl;
    }
    testmsg << "CPU time used = " << timer.cpu_time() << " secs." << endl;
    timer.clear();
    //-------------------------------------------------------------------------
#endif

    // RC FFT tests
    RFieldPPStan = real(CFieldPPStan_save);
    CFieldPPStan0h = dcomplex(0.0,0.0);
#ifndef ONED
    RFieldSPStan = real(CFieldSPStan_save);
    CFieldSPStan0h = dcomplex(0.0,0.0);
    CFieldSPPerm0h = dcomplex(0.0,0.0);
#endif

    RFieldPPStan_save = RFieldPPStan;  // save input data for checking results
#ifndef ONED
    RFieldSPStan_save = RFieldSPStan;
#endif

    // create RC FFT object
    FFT<RCTransform,D,double> rcfft(ndiStandard, ndiStandard0h, compressTemps);

#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
#else
    // set direction names
    rcfft.setDirectionName(+1, "forward");
    rcfft.setDirectionName(-1, "inverse");
#endif

    testmsg << "RC transform using all-parallel layout ..." << endl;
    timer.start();
    // Test real<-->complex transform (simple test: forward then inverse
    // transform, see if we get back original values.
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " about to invoke forward FFT::transform()" << endl;
#endif
    testmsg << "Forward transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    rcfft.transform(forward, RFieldPPStan, CFieldPPStan0h, constInput);
#else
    rcfft.transform("forward", RFieldPPStan, CFieldPPStan0h, constInput);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
    cout << "PE " << pe << " about to invoke inverse FFT::transform()" << endl;
#endif
    testmsg << "Inverse transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    rcfft.transform(inverse, CFieldPPStan0h, RFieldPPStan, constInput);
#else
    rcfft.transform("inverse", CFieldPPStan0h, RFieldPPStan, constInput);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
#endif
    timer.stop();

    diffFieldPPStan = Abs(RFieldPPStan - RFieldPPStan_save);
    realDiff = max(diffFieldPPStan);
    if (fabs(realDiff) > errorTol) {
      correct = false;
      testmsg << "fabs(realDiff) = " << fabs(realDiff) << endl;
    }
    testmsg << "CPU time used = " << timer.cpu_time() << " secs." << endl;
    timer.clear();
    //-------------------------------------------------------------------------

#ifndef ONED
    testmsg << "RC transform using layout with zeroth dim serial ..." << endl;
    timer.start();
    // Test real<-->complex transform (simple test: forward then inverse
    // transform, see if we get back original values.
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " about to invoke forward FFT::transform()" << endl;
#endif
    testmsg << "Forward transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    rcfft.transform(forward, RFieldSPStan, CFieldSPStan0h, constInput);
#else
    rcfft.transform("forward", RFieldSPStan, CFieldSPStan0h, constInput);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
    cout << "PE " << pe << " about to invoke inverse FFT::transform()" << endl;
#endif
    testmsg << "Inverse transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    rcfft.transform(inverse, CFieldSPStan0h, RFieldSPStan, constInput);
#else
    rcfft.transform("inverse", CFieldSPStan0h, RFieldSPStan, constInput);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
#endif
    timer.stop();

    diffFieldSPStan = Abs(RFieldSPStan - RFieldSPStan_save);
    realDiff = max(diffFieldSPStan);
    if (fabs(realDiff) > errorTol) {
      correct = false;
      testmsg << "fabs(realDiff) = " << fabs(realDiff) << endl;
    }
    testmsg << "CPU time used = " << timer.cpu_time() << " secs." << endl;
    timer.clear();
    //-------------------------------------------------------------------------

    RFieldSPStan = RFieldSPStan_save;  // restore field, just in case ...

    testmsg << "RC transform using layout with axes permuted ..." << endl;
    timer.start();
    // Test real<-->complex transform (simple test: forward then inverse
    // transform, see if we get back original values.
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " about to invoke forward FFT::transform()" << endl;
#endif
    testmsg << "Forward transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    rcfft.transform(forward, RFieldSPStan, CFieldSPPerm0h, constInput);
#else
    rcfft.transform("forward", RFieldSPStan, CFieldSPPerm0h, constInput);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
    cout << "PE " << pe << " about to invoke inverse FFT::transform()" << endl;
#endif
    testmsg << "Inverse transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    rcfft.transform(inverse, CFieldSPPerm0h, RFieldSPStan, constInput);
#else
    rcfft.transform("inverse", CFieldSPPerm0h, RFieldSPStan, constInput);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
#endif
    timer.stop();

    diffFieldSPStan = Abs(RFieldSPStan - RFieldSPStan_save);
    realDiff = max(diffFieldSPStan);
    if (fabs(realDiff) > errorTol) {
      correct = false;
      testmsg << "fabs(realDiff) = " << fabs(realDiff) << endl;
    }
    testmsg << "CPU time used = " << timer.cpu_time() << " secs." << endl;
    timer.clear();
    //-------------------------------------------------------------------------
#endif

    // define zeroth axis to be sine transform
    bool sineTransformDims[D];
    sineTransformDims[0] = true;
    for (d=1; d<D; ++d) sineTransformDims[d] = false;

#ifndef ONED
    // Sine and RC transform tests

    RFieldPPStan = RFieldPPStan_save;
    CFieldPPStan1h = dcomplex(0.0,0.0);
    RFieldSPStan = RFieldSPStan_save;
    CFieldSPStan1h = dcomplex(0.0,0.0);
    CFieldSPPerm1h = dcomplex(0.0,0.0);

    // create Sine FFT object
    FFT<SineTransform,D,double> sinefft(ndiStandard, ndiStandard1h,
                                        sineTransformDims, compressTemps);
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
#else
    // set direction names
    sinefft.setDirectionName(+1,"forward");
    sinefft.setDirectionName(-1,"inverse");
#endif

    testmsg << "Sine and RC transform using all-parallel layout ..." << endl;
    timer.start();
    // Test sine transform (simple test: forward then inverse
    // transform, see if we get back original values.
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " about to invoke forward FFT::transform()" << endl;
#endif
    testmsg << "Forward transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    sinefft.transform(forward, RFieldPPStan, CFieldPPStan1h, constInput);
#else
    sinefft.transform("forward", RFieldPPStan, CFieldPPStan1h, constInput);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
    cout << "PE " << pe << " about to invoke inverse FFT::transform()" << endl;
#endif
    testmsg << "Inverse transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    sinefft.transform(inverse, CFieldPPStan1h, RFieldPPStan, constInput);
#else
    sinefft.transform("inverse", CFieldPPStan1h, RFieldPPStan, constInput);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
#endif
    timer.stop();

    diffFieldPPStan = Abs(RFieldPPStan - RFieldPPStan_save);
    realDiff = max(diffFieldPPStan);
    if (fabs(realDiff) > errorTol) {
      correct = false;
      testmsg << "fabs(realDiff) = " << fabs(realDiff) << endl;
    }
    testmsg << "CPU time used = " << timer.cpu_time() << " secs." << endl;
    timer.clear();
    //-------------------------------------------------------------------------

    testmsg << "Sine and RC transform using layout with zeroth dim serial ..."
            << endl;
    timer.start();
    // Test sine transform (simple test: forward then inverse
    // transform, see if we get back original values.
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " about to invoke forward FFT::transform()" << endl;
#endif
    testmsg << "Forward transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    sinefft.transform(forward, RFieldSPStan, CFieldSPStan1h, constInput);
#else
    sinefft.transform("forward", RFieldSPStan, CFieldSPStan1h, constInput);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
    cout << "PE " << pe << " about to invoke inverse FFT::transform()" << endl;
#endif
    testmsg << "Inverse transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    sinefft.transform(inverse, CFieldSPStan1h, RFieldSPStan, constInput);
#else
    sinefft.transform("inverse", CFieldSPStan1h, RFieldSPStan, constInput);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
#endif
    timer.stop();

    diffFieldSPStan = Abs(RFieldSPStan - RFieldSPStan_save);
    realDiff = max(diffFieldSPStan);
    if (fabs(realDiff) > errorTol) {
      correct = false;
      testmsg << "fabs(realDiff) = " << fabs(realDiff) << endl;
    }
    testmsg << "CPU time used = " << timer.cpu_time() << " secs." << endl;
    timer.clear();
    //-------------------------------------------------------------------------

    RFieldSPStan = RFieldSPStan_save;  // restore field, just in case ...

    testmsg << "Sine and RC transform using layout with axes permuted ..."
            << endl;
    timer.start();
    // Test sine transform (simple test: forward then inverse
    // transform, see if we get back original values.
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " about to invoke forward FFT::transform()" << endl;
#endif
    testmsg << "Forward transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    sinefft.transform(forward, RFieldSPStan, CFieldSPPerm1h, constInput);
#else
    sinefft.transform("forward", RFieldSPStan, CFieldSPPerm1h, constInput);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
    cout << "PE " << pe << " about to invoke inverse FFT::transform()" << endl;
#endif
    testmsg << "Inverse transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    sinefft.transform(inverse, CFieldSPPerm1h, RFieldSPStan, constInput);
#else
    sinefft.transform("inverse", CFieldSPPerm1h, RFieldSPStan, constInput);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
#endif
    timer.stop();

    diffFieldSPStan = Abs(RFieldSPStan - RFieldSPStan_save);
    realDiff = max(diffFieldSPStan);
    if (fabs(realDiff) > errorTol) {
      correct = false;
      testmsg << "fabs(realDiff) = " << fabs(realDiff) << endl;
    }
    testmsg << "CPU time used = " << timer.cpu_time() << " secs." << endl;
    timer.clear();
    //-------------------------------------------------------------------------
#endif

    // Sine transform tests
    RFieldPPStan = RFieldPPStan_save;
#ifndef ONED
    RFieldSPStan = RFieldSPStan_save;
#endif

    // create Sine FFT object
    FFT<SineTransform,D,double> sinefft2(ndiStandard, sineTransformDims,
                                         compressTemps);
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
#else
    // set direction names
    sinefft2.setDirectionName(+1,"forward");
    sinefft2.setDirectionName(-1,"inverse");
#endif

    testmsg << "In-place sine transform using all-parallel layout ..." << endl;
    timer.start();
    // Test sine transform (simple test: forward then inverse
    // transform, see if we get back original values.
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " about to invoke forward FFT::transform()" << endl;
#endif
    testmsg << "Forward transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    sinefft2.transform(forward, RFieldPPStan);
#else
    sinefft2.transform("forward", RFieldPPStan);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
    cout << "PE " << pe << " about to invoke inverse FFT::transform()" << endl;
#endif
    testmsg << "Inverse transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    sinefft2.transform(inverse, RFieldPPStan);
#else
    sinefft2.transform("inverse", RFieldPPStan);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
#endif
    timer.stop();

    diffFieldPPStan = Abs(RFieldPPStan - RFieldPPStan_save);
    realDiff = max(diffFieldPPStan);
    if (fabs(realDiff) > errorTol) {
      correct = false;
      testmsg << "fabs(realDiff) = " << fabs(realDiff) << endl;
    }
    testmsg << "CPU time used = " << timer.cpu_time() << " secs." << endl;
    timer.clear();
    //-------------------------------------------------------------------------

#ifndef ONED
    testmsg << "In-place sine transform using layout with zeroth dim serial ..." << endl;
    timer.start();
    // Test sine transform (simple test: forward then inverse
    // transform, see if we get back original values.
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " about to invoke forward FFT::transform()" << endl;
#endif
    testmsg << "Forward transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    sinefft2.transform(forward, RFieldSPStan);
#else
    sinefft2.transform("forward", RFieldSPStan);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
    cout << "PE " << pe << " about to invoke inverse FFT::transform()" << endl;
#endif
    testmsg << "Inverse transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    sinefft2.transform(inverse, RFieldSPStan);
#else
    sinefft2.transform("inverse", RFieldSPStan);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
#endif
    timer.stop();

    diffFieldSPStan = Abs(RFieldSPStan - RFieldSPStan_save);
    realDiff = max(diffFieldSPStan);
    if (fabs(realDiff) > errorTol) {
      correct = false;
      testmsg << "fabs(realDiff) = " << fabs(realDiff) << endl;
    }
    testmsg << "CPU time used = " << timer.cpu_time() << " secs." << endl;
    timer.clear();
    //-------------------------------------------------------------------------

    RFieldSPStan = RFieldSPStan_save;  // restore input field, just in case

    testmsg << "Two-field sine transform using layout with zeroth dim serial ..." << endl;
    timer.start();
    // Test sine transform (simple test: forward then inverse
    // transform, see if we get back original values.
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " about to invoke forward FFT::transform()" << endl;
#endif
    testmsg << "Forward transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    sinefft2.transform(forward, RFieldSPStan, RFieldSPStan, constInput);
#else
    sinefft2.transform("forward", RFieldSPStan, RFieldSPStan, constInput);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
    cout << "PE " << pe << " about to invoke inverse FFT::transform()" << endl;
#endif
    testmsg << "Inverse transform ..." << endl;
#ifdef __MWERKS__
    // Is this CW4 bug or bug in this source or IPPL FFT sources?
    sinefft2.transform(inverse, RFieldSPStan, RFieldSPStan, constInput);
#else
    sinefft2.transform("inverse", RFieldSPStan, RFieldSPStan, constInput);
#endif
#ifdef IPPL_PRINTDEBUG
    cout << "PE " << pe << " back from FFT::transform()" << endl;
#endif
    timer.stop();

    diffFieldSPStan = Abs(RFieldSPStan - RFieldSPStan_save);
    realDiff = max(diffFieldSPStan);
    if (fabs(realDiff) > errorTol) {
      correct = false;
      testmsg << "fabs(realDiff) = " << fabs(realDiff) << endl;
    }
    testmsg << "CPU time used = " << timer.cpu_time() << " secs." << endl;
    timer.clear();
    //-------------------------------------------------------------------------
#endif

    // Report if any errors have happened:
    testmsg << ( (correct) ? "PASSED" : "FAILED" ) << endl;

  }
  // =================END INTERACTION LOOP=====================================
  return 0;
}
/***************************************************************************
 * $RCSfile: TestFFT.cpp.org,v $   $Author: adelmann $
 * $Revision: 1.1.1.1 $   $Date: 2003/01/23 07:40:36 $
 ***************************************************************************/
